cmake_minimum_required(VERSION 3.0)
project(SimpleChat LANGUAGES C CXX VERSION 0.0.3)

option(BUILD_CLIENT "Enable building client app" ON)
option(BUILD_SERVER "Enable building server prog" ON)
#but the lib is necessary for both, so not an option

set(default_build_type "Release")
if(EXISTS "${CMAKE_SOURCE_DIR}/.git")
    set(default_build_type "Debug")
endif()
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
    set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE STRING "Choose the type of build." FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

set(LIBRARY_OUTPUT_PATH build/${CMAKE_BUILD_TYPE})
set(EXECUTABLE_OUTPUT_PATH build/${CMAKE_BUILD_TYPE})

function (ListToString result delim)
    list(GET ARGV 2 temp)
    math(EXPR N "${ARGC}-1")
    foreach(IDX RANGE 3 ${N})
        list(GET ARGV ${IDX} STR)
        set(temp "${temp}${delim}${STR}")
    endforeach()
    set(${result} "${temp}" PARENT_SCOPE)
endfunction(ListToString)

ListToString(str "\n \t" ${CMAKE_CXX_COMPILE_FEATURES})
message(AUTHOR_WARNING "Supported features = ${str}\n")
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

ListToString(str "\n \t" ${CMAKE_C_COMPILE_FEATURES})
message(AUTHOR_WARNING "Supported features = ${str}\n")
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(warnings "-Wall -Wextra")
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set(warnings "${warnings} -Werror")
    endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(warnings "/W4 /WX /EHsc")
endif()
if(NOT CONFIGURED_ONCE)
    set(CMAKE_CXX_FLAGS "${warnings}" CACHE STRING "Flags used by the compiler during all build types." FORCE)
    set(CMAKE_C_FLAGS   "${warnings}" CACHE STRING "Flags used by the compiler during all build types." FORCE)
    set(CMAKE_CXX_FLAGS_DEBUG "-ggdb3 -O1 -D DEBUG -D NPREFETCH" CACHE STRING "Flags used by the complier during debug build type." FORCE)
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -D NDEBUG -D NPREFETCH" CACHE STRING "Flags used by the compiler during release build type." FORCE)
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -ggdb3 -D NDEBUG -D NPREFETCH" CACHE STRING "Flags used by the compiler during relwithdebinfo." FORCE)
endif()

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)

if(WIN32)
#if(MSVS OR MSYS OR MINGW)
    add_definitions(-D_WIN32)
endif()

file(GLOB_RECURSE lib_src_files ${CMAKE_SOURCE_DIR}/common/*)
add_library(SChat SHARED ${lib_src_files})
target_include_directories(SChat PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/common)
if(WIN32)
    target_link_libraries(SChat wsock32 ws2_32)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
#include_directories(${CMAKE_CURRENT_SOURCE_DIR}/libs/includes)

if(BUILD_SERVER)
    file(GLOB_RECURSE srv_src_files ${CMAKE_SOURCE_DIR}/server/*)
    add_executable(schatSrv ${srv_src_files})
    target_include_directories(schatSrv PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/server)
    target_link_libraries(schatSrv LINK_PUBLIC SChat)
    target_link_libraries(schatSrv LINK_PUBLIC Threads::Threads)
    if(WIN32)
      target_link_libraries(schatSrv LINK_PUBLIC wsock32 ws2_32)
    endif()
endif()

if(BUILD_CLIENT)
    file(GLOB_RECURSE cli_src_files ${CMAKE_SOURCE_DIR}/client/*)
    add_executable(schatCli ${cli_src_files})
    target_include_directories(schatCli PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/client)
    target_link_libraries(schatCli LINK_PUBLIC SChat)
endif()

set(CONFIGURED_ONCE TRUE CACHE INTERNAL "A flag showing that CMake has configured at least once.")
